This is the grammar I'm using. In general capitalized words refer to nonterminal
symbols, all caps words are terminals with regular expressions, lower case words
are keywords, and symbols are literal. I use [.]+ and [.]* for lists to make
things a little simpler. Functions use semicolons to end lines so that we can
make whitespace unimportant. A function might look like

>>> foo :: Int -> Int -> Bool;
>>> foo 0 0 = false;
>>> foo 1 1 = true;
>>> foo a b = a < b;

Also note that comments are haskell style, i.e., they may be -- to \n or they
may be {* to *}. Functions are curried so function application always occurs
between exactly two expressions and should be left associative.

Program ::= [Declaration]+

Declaration ::= FunctionType
              | FunctionDef
              | Datatype

FunctionType ::= ID :: Type ;

Type ::= TYPE
       | ( )
       | [ Type ]
       | ( [Type ,]+ Type )
       | Type -> Type
       | ( Type )

FunctionDef ::= ID [PExpr]* = Expr ;

Datatype ::= data TYPE = [Constructor |]* Constructor

Constructor ::= TYPE [Type]*

Expr ::= ID                            -- Variable reference
       | INT                           -- Integer literal
       | STRING                        -- String literal
       | true                          -- Boolean literal true
       | false                         -- Boolean literal false
       | Expr + Expr                   -- Arithmetic Expressions
       | Expr - Expr                   --
       | Expr * Expr                   --
       | Expr / Expr                   --
       | ~ Expr                        -- Arithmetic negation
       | Expr < Expr                   -- Comparison operators
       | Expr == Expr                  --
       | Expr <= Expr                  --
       | Expr && Expr                  -- Boolean expressions
       | Expr || Expr                  --
       | not Expr                      --
       | Expr . Expr                   -- Composition
       | ( Expr )                      -- Grouping
       | ( Expr , [Expr ,]* Expr )     -- Tuple construction
       | ( )                           -- Unit value
       | Expr : Expr                   -- List construction
       | [ ]                           -- Empty list
       | let ID = Expr in Expr         --
       | case Expr of [CaseBranch ;]+  --
       | if Expr then Expr else Expr   --
       | Application                   -- Function application

Application ::= AExpr
              | Application AExpr

AExpr ::= ID
        | INT
        | STRING
        | true
        | false
        | ( )
        | ( Expr )
        | ( [Expr ,]+ Expr )
        | [ ]

CaseBranch ::= PExpr -> Expr

PExpr ::= ID
        | INT
        | STRING
        | true
        | false
        | ( )
        | ( [PExpr ,]* PExpr )
        | [ ]
        | PExpr : PExpr
        | Type [PExpr]   -- Constructor matching


Regular expressions for terminals:
TYPE =~ [A-Z][A-Za-z0-9_]
ID =~ [a-z_][A-Za-z0-9_]
INT =~ [+-]?[0-9]+

Semantic stuff:
'print' is a built-in function taking any type and returning (), so printing
can be done by 'let <garbage> = print <value> in <expr>'.

Built-in types:
- String
- Int
- Bool

Built-in functions:
- concat
- substr
- length
- printInt
- printString
- printBool

Some semantic checks:
- There is a main method
- No two declarations should have the same name
- Look for undefined types in function signatures and definitions
- Matching should not bind the same name more than once (we shouldn't have
    something like foo (A => A => B) is foo a a = ...;'

If I'm going to allow type variables (which I should) then I need to write
some rules formally and redo the typechecker.

We consider two type variables to be equal always for this purpose
We assume there is an environment gamma. We define a typing function:
T(id) = gamma(id)
T(int) = 'Int'
T(string) = 'String'
T(bool) = 'Bool'
T(e1 o e2) = if T(e1) = 'Int' && T(e2) = 'Int' then 'Int' else ERROR
    for o = +,-,*,/
T(~e1) = if T(e1) = 'Int' then 'Int' else ERROR
T(e1 < e2) = if T(e1) = 'Int' && T(e2) = 'Int' then 'Bool' else ERROR
T(e1 <= e2) = if T(e1) = 'Int' && T(e2) = 'Int' then 'Bool' else ERROR
T(e1 == e2) = if T(e1) = T(e2) && <T(e1),T(e2) are base types> then 'Bool' else ERROR
T(e1 && e2) = if T(e1) = 'Bool' && T(e2) = 'Bool' then 'Bool' else ERROR
T(e1 || e2) = if T(e1) = 'Bool' && T(e2) = 'Bool' then 'Bool' else ERROR
T(not e1) = if T(e1) = 'Bool' then 'Bool' else ERROR
T(Expr . Expr) = T(e1) = t1 -> t2 && T(e2) = t3 -> t4 && t2 = t3 then t1 -> t4 else ERROR
T((e1, ..., en)) = (T(e1), ..., T(en))
T(()) = ()
T(e1 : e2) = if <T(e2) is a list type over t1> && (e1 = t1 || <t1 is variable>) then [e1] else ERROR
T([]) = [emptyListTypeVar]
T(let x = e1 in e2) = if <e1 is well-typed> then T(e2) <with gamma(x)=T(e1)> else ERROR
T(if e1 then e2 else e3) = if T(e1) = 'Bool' && T(e2) = T(e3) then T(e2) else ERROR
T(e1 e2) = if <T(e1) is a function type>
           then if <arg(T(e1)) is variable>
                then ret(T(e1))[T(e2)/arg(T(e1))]
                else if arg(T(e1)) = T(e2) then ret(T(e1)) else ERROR
           else ERROR
T(case e1 of branches) = TODO
